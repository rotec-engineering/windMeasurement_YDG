extends layout

block content
  link(rel='stylesheet', href='/css/info.css')
  body(style="background-color: #FFFFFF")
    div
      .left(style="width: 47%; height: 800px; float: left; box-sizing: border-box; background-color: #e0ffff  ; margin-top: 3%; margin-left: 3%")
        .row
          .col
            table#windInfo
              thead
                tr(style="margin-left: 10%; align: center")
                  th#image(style="width: 50%" colspan='1')
                    img.wind-direction-icon(src="images/arrow-icon.png", alt="wind-direction" style={
                      width: '250px',
                      transform: `rotate(${datas[0].windDirection}deg)`
                    })
                  th(style="width: 50%;")
                    figure.highcharts-figure
                      #container-speed.chart-container
                tr
                  th
                    p(style="font-size: 20px; text-align: center") 현재 풍향
                  th
                    p(style="width: 30%; font-size: 20px; text-align: right") 현재 풍속


            -for(let i = 0; i < 7; i++)
              input(id='dayWindData' + i, type = "hidden", value = `${dayWindData[i].windSpeed}`)
              input(id='dayExpress' + i, type = "hidden", value = `${dayWindData[i].rgst_dt}`)
            -for(let i = 0; i < 12 * 6; i++)
               input(id = 'windSpeedEachDay' + i, type = "hidden", value = `${timeWindDataFor6days[i].windSpeed}`)
            -for(let i = 0; i < timeWindDataForLastDay.length; i++)
              input(id='windSpeedLastDay' + i, type = 'hidden', value = `${timeWindDataForLastDay[i].windSpeed}`)

            script.
              var gaugeOptions = {
                chart: {
                  type: 'solidgauge'
                },

                title: null,

                pane: {
                  center: ['50%', '85%'],
                  size: '140%',
                  startAngle: -90,
                  endAngle: 90,
                  background: {
                    backgroundColor:
                            Highcharts.defaultOptions.legend.backgroundColor || '#EEE',
                    innerRadius: '60%',
                    outerRadius: '100%',
                    shape: 'arc'
                  }
                },

                exporting: {
                  enabled: false
                },

                tooltip: {
                  enabled: false
                },

                // the value axis
                yAxis: {
                  stops: [
                    [0.1, '#55BF3B'], // green
                    [0.5, '#DDDF0D'], // yellow
                    [0.9, '#DF5353'] // red
                  ],
                  lineWidth: 0,
                  tickWidth: 0,
                  minorTickInterval: null,
                  tickAmount: 2,
                  title: {
                    y: -70
                  },
                  labels: {
                    y: 16
                  }
                },

                plotOptions: {
                  solidgauge: {
                    dataLabels: {
                      y: 5,
                      borderWidth: 0,
                      useHTML: true
                    }
                  }
                }
              };

              // The wind speed
              var chartSpeed = Highcharts.chart('container-speed', Highcharts.merge(gaugeOptions, {
                yAxis: {
                  min: 0,
                  max: 60,
                  title: {
                    text: 'WindSpeed'
                  }
                },

                credits: {
                  enabled: false
                },

                series: [{
                  name: 'WindSpeed',
                  data: [60],
                  dataLabels: {
                    format:
                            '<div style="text-align:center">' +
                            '<span style="font-size:25px">{y}</span><br/>' +
                            '<span style="font-size:12px;opacity:0.4">m/s</span>' +
                            '</div>'
                  },
                  tooltip: {
                    valueSuffix: ' m/s'
                  }
                }]

              }));

        .row
          .col(style="width: 100%; float: right; box-sizing: border-box")
            figure.highcharts-figure
              #container

            script.
              var barChart = Highcharts.chart('container', {
                chart: {
                  type: 'column'
                },
                title: {
                  text: 'Wind Speed for one month in 2020'
                },
                accessibility: {
                  announceNewData: {
                    enabled: true
                  }
                },
                xAxis: {
                  type: 'category'
                },
                yAxis: {
                  title: {
                    text: 'WindSpeed (m/s)'
                  }

                },
                legend: {
                  enabled: false
                },
                plotOptions: {
                  series: {
                    borderWidth: 1,
                    dataLabels: {
                      enabled: true,
                      format: '{point.y:.1f}m/s'
                    }
                  }
                },

                tooltip: {
                  headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                  pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}m/s</b> in day <br/>'
                },

                series: [
                  {
                    name: "windSpeedOnMonth",
                    colorByPoint: true,
                    data: []
                  }
                ],
                drilldown: {
                  series: setDrilldownForEachDay()
                }
              });

              setInterval(function () {
                setWindData();
              }, 3000);

              const setWindData = () => {
                  $.ajax({
                    data: {},
                    type: 'get',
                    dataType: 'html',
                    url: '/index/api/search',
                    contentType: 'application/json',
                    success: (result) => {
                      const point = chartSpeed.series[0].points[0];
                      const newVal = result * 1;

                      point.update(newVal);
                    },
                    error: (err) => {
                      console.log(err);
                    }
                  })
              }

              //set data to drilldwon of barChart for each day
              function setDrilldownForEachDay() {
                let setWindDataOfDrilldownForEachDay = [];

                for(let i = 6; i >= 0; i--) {
                  let drilldownName = document.getElementById('dayExpress' + i).value;
                  let drilldownId = document.getElementById('dayExpress' + i).value;

                  if(i === 0) {
                    setWindDataOfDrilldownForEachDay.push({
                      name: drilldownName,
                      id: drilldownId,
                      data: setLastDrilldown()
                    })
                  } else {
                    setWindDataOfDrilldownForEachDay.push({
                      name: drilldownName,
                      id: drilldownId,
                      data: setDrilldown(i)
                    })
                  }
                }

                return setWindDataOfDrilldownForEachDay;
              }

              // set data to drilldown of barChart
              function setDrilldown(num) {
                const dataTermStart = num * 12 - 1;
                const dataTermEnd = num * 12 - 12;
                const time = ["0시", "2시" , "4시", "6시", "8시", "10시", "12시", "14시", "16시", "18시", "20시", "22시"];
                let setWindDataOfDrilldown = [];

                for(let i = dataTermStart, j = 0; i >= dataTermEnd; i--, j++) {
                  setWindDataOfDrilldown.push(
                    [
                      time[j],
                      document.getElementById('windSpeedEachDay' + i).value * 1
                    ]
                  )
                }

                return setWindDataOfDrilldown;
              }

              // set lastData to drilldown of barChart
              function setLastDrilldown() {
                const time = ["0시", "2시", "4시", "6시", "8시", "10시", "12시", "14시", "16시", "18시", "20시", "22시"];
                let setWindDataOfDrilldown = [];

                for (let i = 0, j = 0; i < 12; i++, j++) {
                  let contentName = document.getElementById('windSpeedLastDay' + i) !== null ? time[j] : "(feature)" + time[j];
                  let dataValue = document.getElementById('windSpeedLastDay' + i) !== null ? document.getElementById('windSpeedLastDay' + i).value * 1 : null;
                  setWindDataOfDrilldown.push(
                    [
                      contentName,
                      dataValue
                    ]
                  )
                }

                return setWindDataOfDrilldown;
              }

              // set data to barChart
              function setBarChart() {
                let setWindData = [];

                for (let i = 6; i >= 0; i--) {
                  let graphContentsName = document.getElementById('dayExpress' + i).value;
                  let windSpeedData = document.getElementById('dayWindData' + i).value * 1;

                  setWindData.push({
                    name: graphContentsName,
                    y: windSpeedData,
                    drilldown: graphContentsName
                  })
                }

                return setWindData;
              }

              barChart.series[0].setData(setBarChart());              // set BarChart (7 graph -> content name, windSpeed, drilldownName)

      .right(style="width: 45%; height: 800px; float: right; box-sizing: border-box; background-color: #e0ffff; margin-top: 3%; margin-right: 3%; margin-bottom: 3%;")
        include ./home/windDataTable.pug