extends ../layout

block content
    link(rel='stylesheet', href='/stylesheets/deviceTable.css')
    script(type='text/javascript' src='https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=tpkaldfehz&submodules=geocoder')

    script.
        let latitude = 35.5039678;
        let longitude = 129.3055745;
        let deviceImg;
        const position = new naver.maps.LatLng(latitude, longitude);

        $(function () {
            let map = new naver.maps.Map("map", {
                center: position,
                zoom: 15,
                mapTypeControl: true
            });

            let marker = new naver.maps.Marker({
                map: map,
                position: position
            });

            let infoWindow = new naver.maps.InfoWindow({
                anchorSkew: true
            });

            map.setCursor('pointer');

            function searchCoordinateToAddress(latlng) {
                infoWindow.close();

                naver.maps.Service.reverseGeocode({
                    coords: latlng,
                    orders: [
                        naver.maps.Service.OrderType.ADDR,
                        naver.maps.Service.OrderType.ROAD_ADDR
                    ].join(',')
                }, function (status, response) {
                    if (status === naver.maps.Service.Status.ERROR) {
                        if (!latlng) {
                            return alert('ReverseGeocode Error, Please check latlng');
                        }
                        if (latlng.toString) {
                            return alert('ReverseGeocode Error, latlng:' + latlng.toString());
                        }
                        if (latlng.x && latlng.y) {
                            return alert('ReverseGeocode Error, x:' + latlng.x + ', y:' + latlng.y);
                        }
                        return alert('ReverseGeocode Error, Please check latlng');
                    }

                    let address = response.v2.address,
                        htmlAddresses = [];

                    if (address.jibunAddress !== '') {
                        $("#registerArea").val(address.jibunAddress);
                        htmlAddresses.push('[지번 주소] ' + address.jibunAddress);
                    }

                    if (address.roadAddress !== '') {
                        htmlAddresses.push('[도로명 주소] ' + address.roadAddress);
                    }

                    infoWindow.setContent([
                        '<div style="padding:10px; min-width:200px; line-height:150%; font-size: 12px">',
                        // '<h5 style="margin-top:5px;">검색 좌표</h4><br />',
                        htmlAddresses.join('<br />'),
                        '</div>'
                    ].join('\n'));

                    infoWindow.open(map, marker);
                });
            }

            function searchAddressToCoordinate(address) {
                naver.maps.Service.geocode({
                    query: address
                }, function (status, response) {
                    if (status === naver.maps.Service.Status.ERROR) {
                        if (!address) {
                            return alert('Geocode Error, Please check address');
                        }
                        return alert('Geocode Error, address:' + address);
                    }

                    if (response.v2.meta.totalCount === 0) {
                        return alert('No result.');
                    }

                    let htmlAddresses = [],
                        item = response.v2.addresses[0],
                        point = new naver.maps.Point(item.x, item.y);

                    if (item.roadAddress) {
                        htmlAddresses.push('[도로명 주소] ' + item.roadAddress);
                    }

                    if (item.jibunAddress) {
                        $("#registerArea").val(item.jibunAddress);
                        htmlAddresses.push('[지번 주소] ' + item.jibunAddress);
                    }

                    infoWindow.setContent([
                        '<div style="padding:10px;min-width:200px;line-height:150%; font-size: 12px">',
                        '<h5 style="margin-top:5px;">검색 주소 : ' + address + '</h4><br />',
                        htmlAddresses.join('<br />'),
                        '</div>'
                    ].join('\n'));

                    longitude = point.x;                                      // set coordinate for DB
                    latitude = point.y;                                       // set coordinate for DB
                    marker.setPosition(point);
                    map.setCenter(point);
                    infoWindow.open(map, marker);
                });
            }

            function initGeocoder() {
                if (!map.isStyleMapReady) {
                    return;
                }

                map.addListener('click', function (e) {
                    longitude = e.coord.x;                                      // set coordinate for DB
                    latitude = e.coord.y;                                       // set coordinate for DB
                    searchCoordinateToAddress(e.coord);
                    marker.setPosition(e.coord);
                });

                $('#address').on('keydown', function (e) {
                    let keyCode = e.which;

                    if (keyCode === 13) { // Enter Key
                        searchAddressToCoordinate($('#address').val());
                    }
                });

                $('#submit').on('click', function (e) {
                    e.preventDefault();

                    searchAddressToCoordinate($('#address').val());
                });

                searchAddressToCoordinate('테크노산업로 55번길 133-9');
            }

            naver.maps.onJSContentLoaded = initGeocoder;
            naver.maps.Event.once(map, 'init_stylemap', initGeocoder);
        });

        const selectDevice = (e) => {
            if(e.value === 'customOption') {                                                // display the input function follow with selection
                document.getElementsByName("customInput")[0].style.display = 'inline';
            }
            else {
                document.getElementsByName("customInput")[0].style.display = 'none';
            }
        }

        function uploadImgPreview(fileInput) {                                              // display picture that customer pic
            if (fileInput.files && fileInput.files[0]) {
                if (fileInput.files[0].type.substring(0, 5) !== 'image') {                  // if user choose the none Img File, it should be not operated
                    alert("이미지 파일이 아닙니다.\n이미지 파일을 선택해주세요.");

                    deviceImg = undefined;
                    document.getElementById("deviceImgInput").value = '';                   // must be used on over IE11
                    document.getElementById("previewImg").src = '';

                    return 0;
                }

                const reader = new FileReader();
                reader.onload = function () {
                    document.getElementById("previewImg").src = reader.result;
                };

                deviceImg = fileInput.files[0];
                reader.readAsDataURL(deviceImg);
            }
        }

        function deleteExistingImg() {                                                      // remove preView Img
            let result = confirm("이미지를 삭제 하시겠습니까?");
            if (!result) {
                return 0;
            }

            deviceImg = undefined;
            document.getElementById("deviceImgInput").value = '';                           // must be used on over IE11
            document.getElementById("previewImg").src = '';
        }

        function registerDevice() {
            let result = confirm("장치를 등록 하시겠습니까?");
            if(!result) {
                return 0;
            }

            let deviceType;
            if($("select[name= deviceOptions]").val() === "customOption") {                 // deviceType that customer select (option or 'customInput')
                deviceType = $("#customInput").val();
            }
            else {
                deviceType =$("select[name= deviceOptions]").val();
            }

            let form = new FormData();                                                      // I used that when I control about ImgData
            form.append("deviceImg", deviceImg);
            form.append('deviceName', $("input[name= deviceName]").val());
            form.append('deviceType', deviceType);
            form.append('latitude', latitude);
            form.append('longitude', longitude);
            $.ajax({                                                                        // register data(name, type,
                data: form,
                type: 'post',
                processData: false,
                contentType: false,
                dataType: 'html',
                url: "/deviceRegister/api/register",
                success: (result) => {
                    if(result === 'register Err') {
                        alert("장치 명 또는 장치 타입 입력이 필요합니다.");
                    }
                    else {
                        console.log(result);
                        alert(result);
                        location.href = "/deviceManage";
                    }
                },
                error: (err) => {
                    console.log(err)
                }
            })
        }

    //#diviceContainer
    .row#deviceContatiner
        p#pageTitle 장치 등록
    .row#showTable
        table#showInfo
            thead#deviceName
                tr
                    th 장치 명
                    td#deviceTitle
                        input(type="text" name="deviceName")
                    td#mapSearch
                        input#address(type="text")
                        button#submit() search
            tbody#deviceInfo
                tr
                    td#deviceImg(colspan="2")
                        img#previewImg(src="")
                    td#map(rowspan="5" style="width: 600px")
                tr
                    td(colspan="2")
                        input(type="file" id="deviceImgInput" name="deviceImgInput" style="width: 75%; float: left" accept="image/*" onchange="uploadImgPreview(this)")
                        button#cancelPicture(onClick='deleteExistingImg()' style="width: 20%; float: right; font-size: 11px" class='btn btn-dark mr-2') X

                tr
                    th 등록 장소
                    td
                        input#registerArea(type="text" disabled = true style="width: 100%")
                tr
                    th 장치 타입
                    td
                        select#selectDevice(name="deviceOptions" style="width: 100%; text-align: center" onchange="selectDevice(this)")
                            option(value = 'customOption') 사용자 입력
                            -for (let i = 0; i < deviceData.length; i++)
                                option(value = `${deviceData[i].deviceType}`) #{deviceData[i].deviceType}
                        input#customInput(type="text" name="customInput" style="width: 100%")
                tr
                    th 등록 일
                    td
                        input(type="text" disabled = true style="width: 100%" value=`${currentTime}`)

    .row
        table#buttonTable
            tr
                td
                    button(onClick='registerDevice()' class='btn btn-dark mr-2') 장치 등록
                td
                    button(onClick='location.href = "/deviceManage"' class='btn btn-dark mr-2') 뒤로 가기
