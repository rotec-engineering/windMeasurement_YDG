extends ../layout

block content
    link(rel='stylesheet', href='/stylesheets/deviceTable.css')
    script(type='text/javascript' src='https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=tpkaldfehz')

    script.
        let map
        let markers = []
        let infoWindows = [];
        const latitude = 35.5039678;
        const longitude = 129.3055745;

        $(function () {                                                                                 // Naver map API setting
            map = new naver.maps.Map('map', {
                center: new naver.maps.LatLng(latitude, longitude),
                zoom: 13
            });

            // naver.maps.Event.addListener(map, 'idle', function () {                                  // if the devices were increased so a lot, at that time must be used
            //     updateMarkers(map, markers);
            // });

            initAjax();
        })

        function initAjax() {
            $.ajax({                                                                                    // get first data for showing the device location
                type: 'get',
                dataType: 'json',
                url: "/deviceManage/api/init",
                contentType: 'application/json',
                success: (result) => {
                    setMarkerNInfowindow(result);
                },
                error: (err) => {
                    console.log(err)
                }
            })
        }

        function setMarkerNInfowindow(deviceInfo) {                                                     // set marker & infoWindow
            for (let key in deviceInfo) {
                const position = new naver.maps.LatLng(deviceInfo[key].deviceLatitude, deviceInfo[key].deviceLongitude);
                const marker = new naver.maps.Marker({
                    map: map,
                    position: position,
                });

                const imgSrc = deviceInfo[key].deviceImgSrc === null ? '' : deviceInfo[key].deviceImgSrc.substring(9, deviceInfo[key].deviceImgSrc.length);
                const deviceType = deviceInfo[key].deviceType;
                const registerDate = deviceInfo[key].registerDate;
                const modifyDate = deviceInfo[key].modifyDate === null ? '' : deviceInfo[key].modifyDate;
                const deviceId = deviceInfo[key].deviceId;
                const infoWindow = new naver.maps.InfoWindow({                                          // infoWindow context setter
                    content: `
                         <table>
                           <tbody style="text-align: center">
                             <tr>
                               <td colspan="2"><img src="${imgSrc}"/></td>
                             </tr>
                             <tr>
                               <th>장치 타입</th>
                               <td> ${deviceType} </td>
                             </tr>
                             <tr>
                               <th>등록 일</th>
                               <td> ${registerDate} </td>
                             </tr>
                             <tr>
                               <th>수정 일</th>
                               <td> ${modifyDate} </td>
                             </tr>
                             <tr style="font-size: 12px">
                               <th><button type="button" onclick="goToDeviceUpdate(${deviceId})" style="width: 100%">수정</button></th>
                               <th><button type="button" onclick="deleteDevice(${deviceId})" style="width: 100%">삭제</button></th>
                           </tbody>
                         </table>
                     `
                });

                markers.push(marker);
                infoWindows.push(infoWindow);
                naver.maps.Event.addListener(markers[key], 'click', getClickHandler(key));              // set eventListener
            }
        }

        // function updateMarkers(map, markers) {                                                          // show marker & infoWindow following with map size
        //     let mapBounds = map.getBounds();
        //     let marker, position;
        //
        //     for (let i = 0; i < markers.length; i++) {
        //         marker = markers[i]
        //         position = marker.getPosition();
        //
        //         if (mapBounds.hasLatLng(position)) {
        //             showMarker(map, marker);
        //         } else {
        //             hideMarker(map, marker);
        //         }
        //     }
        // }

        // function showMarker(map, marker) {
        //     if (marker.setMap()) return;
        //     marker.setMap(map);
        // }
        //
        // function hideMarker(map, marker) {
        //     if (!marker.setMap()) return;
        //     marker.setMap(null);
        // }

        function getClickHandler(seq) {                                                                 // event handler about 'click'
            return function () {
                const marker = markers[seq]
                const infoWindow = infoWindows[seq];

                if (infoWindow.getMap()) {
                    infoWindow.close();
                } else {
                    infoWindow.open(map, marker);
                }
            }
        }

        function goToDeviceUpdate(deviceId) {
            location.href = '/deviceUpdate?deviceId=' + deviceId;
        }

        function deleteDevice(deviceId) {
            const delConfirm = confirm("장치를 정말 삭제 하시겠습니까?");
            if (!delConfirm) {
                return 0;
            }

            $.ajax({
                data: {
                    'deviceId': deviceId
                },
                type: 'get',
                dataType: 'html',
                url: "/deviceManage/api/delete",
                contentType: 'application/json',
                success: (result) => {
                    console.log(result);
                    alert("등록된 장치를 삭제 했습니다.");
                    location.reload();                                                                  // TODO: search the another way instead of reload()!
                },
                error: (err) => {
                    console.log(err)
                }
            })
        }

    //#diviceContainer
    .row#deviceContatiner
        p#pageTitle 장치 목록

    #map(style="width: 50%; height: 600px; margin-left: auto; margin-right: auto; margin-bottom: 1%; border: 2px solid")
    .row#registerRow(style="width: 50%; margin-left: auto; margin-right: auto; ")
        button(onClick='location.href = "/deviceRegister"' class='btn btn-dark mr-2' style="text-align: right") 등록

    // would be made device list table