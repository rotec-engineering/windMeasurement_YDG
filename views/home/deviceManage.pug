extends ../layout

block content
    link(rel='stylesheet', href='/stylesheets/deviceTable.css')
    script(type='text/javascript' src='https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=tpkaldfehz&submodules=geocoder')

    script.
        let map
        let markers = []
        let sortMarkers = [];
        let infoWindows = [];
        let abridgedInfoWindows = [];
        const latitude = 35.5039678;
        const longitude = 129.3055745;

        $(function () {                                                                                 // Naver map API setting
            map = new naver.maps.Map('map', {
                center: new naver.maps.LatLng(latitude, longitude),
                zoom: 13
            });

            // naver.maps.Event.addListener(map, 'idle', function () {                                  // if the devices were increased so a lot, at that time must be used
            //     updateMarkers(map, markers);
            // });

            initAjax();
        })

        function initAjax() {
            $.ajax({                                                                                    // get first data for showing the device location
                type: 'get',
                dataType: 'json',
                url: "/deviceManage/api/init",
                contentType: 'application/json',
                success: (result) => {
                    setMarkerNInfowindow(result);
                },
                error: (err) => {
                    console.log(err)
                }
            })
        }

        function setMarkerNInfowindow(deviceInfo) {                                                     // set marker & infoWindow
            for (let key in deviceInfo) {
                const position = new naver.maps.LatLng(deviceInfo[key].deviceLatitude, deviceInfo[key].deviceLongitude);
                const marker = new naver.maps.Marker({
                    map: map,
                    position: position,
                });
                const tempMarker = {                                                                    // shallow copy prevention
                    'latitude': deviceInfo[key].deviceLatitude,
                    'longitude': deviceInfo[key].deviceLongitude,
                    'key': key,
                    'deviceName': deviceInfo[key].deviceName,
                    'deviceType': deviceInfo[key].deviceType
                };

                const deviceId = deviceInfo[key].deviceId;
                const deviceName = deviceInfo[key].deviceName;
                const deviceType = deviceInfo[key].deviceType;
                const imgSrc = deviceInfo[key].deviceImgSrc === null ? '' : deviceInfo[key].deviceImgSrc.substring(9, deviceInfo[key].deviceImgSrc.length);
                const registerDate = deviceInfo[key].registerDate;
                const modifyDate = deviceInfo[key].modifyDate === null ? '' : deviceInfo[key].modifyDate;
                const infoWindow = new naver.maps.InfoWindow({                                          // infoWindow context setter
                    content: `
                        <table style="text-align: center;">
                          <tbody>
                            <tr>
                              <td colspan="4"><img src="${imgSrc}"/></td>
                            </tr>
                            <tr>
                              <th colspan="2">장치 이름</th>
                              <td colspan="2"> ${deviceName} </td>
                            </tr>
                            <tr>
                              <th colspan="2">장치 타입</th>
                              <td colspan="2"> ${deviceType} </td>
                            </tr>
                            <tr>
                              <th colspan="2">등록 일</th>
                              <td colspan="2"> ${registerDate} </td>
                            </tr>
                            <tr>
                              <th colspan="2">수정 일</th>
                              <td colspan="2"> ${modifyDate} </td>
                            </tr>
                            <tr style="font-size: 12px">
                              <th><button type="button" onclick="selectAnotherInfowindow('moveLeft', ${key})" style="width: 100%"> < </button></th>
                              <th><button type="button" onclick="goToDeviceUpdate(${deviceId})" style="width: 100%">수정</button></th>
                              <th><button type="button" onclick="deleteDevice(${deviceId})" style="width: 100%">삭제</button></th>
                              <th><button type="button" onclick="selectAnotherInfowindow('moveRight', ${key})" style="width: 100%"> > </button></th>
                          </tbody>
                        </table>
                    `
                });

                markers.push(marker);
                infoWindows.push(infoWindow);
                sortMarkers.push(tempMarker);
                naver.maps.Event.addListener(markers[key], 'click', getClickHandler(key));              // set eventListener
            }

            sortMarkers.sort(function (a, b) {                                                          // sort by latitude
                return parseFloat(a.latitude) - parseFloat(b.latitude);
            });
            console.log(sortMarkers);

            for (let i = 0; i < sortMarkers.length; i++) {
                let abridgedInfoWindow = new naver.maps.InfoWindow();
                let tempInfoWindow = `
                    <table style="text-align: center; font-size: 12px" class="table table-bordered table-hover">
                      <thead style="background: #adb5bd">
                        <th>
                            장치 이름
                        </th>
                        <th>
                            장치 타입
                        </th>
                      </thead>
                      <tbody>
                `;
                for(let j = 0; j < sortMarkers.length; j++) {
                    if(Math.abs(sortMarkers[j].latitude - sortMarkers[i].latitude) <= 0.005) {          // difference of latitude -> 0.005
                        if(Math.abs(sortMarkers[i].longitude - sortMarkers[j].longitude) <= 0.005) {    // difference of longitude -> 0.005
                            tempInfoWindow += `
                                <tr onclick="clickDeviceList(${sortMarkers[j].key})">
                                  <td>
                                      ${sortMarkers[j].deviceName}
                                  </td>
                                  <td>
                                      ${sortMarkers[j].deviceType}
                                  </td>
                            `;
                        }
                    }
                    else {
                        continue;
                    }
                }
                tempInfoWindow += `
                        </tr>
                      </tbody>
                    </table>
                `;

                abridgedInfoWindow.setContent(tempInfoWindow);
                abridgedInfoWindows.push(abridgedInfoWindow);
                naver.maps.Event.addListener(markers[sortMarkers[i].key], 'mouseover', getMouseoverHandler(i));         // set eventListener
                naver.maps.Event.addListener(markers[sortMarkers[i].key], 'mouseout', getMouseoutHandler(i));           // set eventListener
                naver.maps.Event.addListener(markers[sortMarkers[i].key], 'click', clickDeviceList(i));                 // set eventListener
            }
        }

        function getClickHandler(seq) {                                                                 // event handler about 'click'
            return function () {
                const marker = markers[seq]
                const infoWindow = infoWindows[seq];

                if (infoWindow.getMap()) {
                    infoWindow.close();
                } else {
                    infoWindow.open(map, marker);
                }
            }
        }

        function getMouseoverHandler(seq) {                                                             // event handler about 'mouseOver'
            return function () {
                const marker = markers[sortMarkers[seq].key];
                const abridgedInfoWindow = abridgedInfoWindows[seq];
                abridgedInfoWindow.open(map, marker);
            };
        }

        function getMouseoutHandler(seq) {                                                             // event handler about 'mouseOut'
            return function () {
                const abridgedInfoWindow = abridgedInfoWindows[seq];
                setTimeout(function () {
                    // abridgedInfoWindow.close();
                }, 1000);
            };
        }

        function clickDeviceList(seq) {                                                                //
            console.log(seq);
            const marker = markers[seq]
            const infoWindow = infoWindows[seq];

            infoWindow.open(map, marker);

        }

        // function updateMarkers(map, markers) {                                                          // show marker & infoWindow following with map size
        //     let mapBounds = map.getBounds();
        //     let marker, position;
        //
        //     for (let i = 0; i < markers.length; i++) {
        //         marker = markers[i]
        //         position = marker.getPosition();
        //
        //         if (mapBounds.hasLatLng(position)) {
        //             showMarker(map, marker);
        //         } else {
        //             hideMarker(map, marker);
        //         }
        //     }
        // }

        // function showMarker(map, marker) {
        //     if (marker.setMap()) return;
        //     marker.setMap(map);
        // }
        //
        // function hideMarker(map, marker) {
        //     if (!marker.setMap()) return;
        //     marker.setMap(null);
        // }

        function searchCoordinateToAddress(Lat, Lng, textId) {
            const latlng = new naver.maps.LatLng(Lat, Lng);
            let htmlAddresses = [];

            naver.maps.Service.reverseGeocode({
                coords: latlng,
                orders: [
                    naver.maps.Service.OrderType.ADDR,
                    naver.maps.Service.OrderType.ROAD_ADDR
                ].join(',')
            }, function (status, response) {
                if (status === naver.maps.Service.Status.ERROR) {
                    if (!latlng) {
                        return alert('ReverseGeocode Error, Please check latlng');
                    }
                    if (latlng.toString) {
                        return alert('ReverseGeocode Error, latlng:' + latlng.toString());
                    }
                    if (latlng.x && latlng.y) {
                        return alert('ReverseGeocode Error, x:' + latlng.x + ', y:' + latlng.y);
                    }
                    return alert('ReverseGeocode Error, Please check latlng');
                }

                let address = response.v2.address;

                if (address.jibunAddress !== '') {
                    htmlAddresses.push('[지번 주소] ' + address.jibunAddress + '\n');
                }

                if (address.roadAddress !== '') {
                    htmlAddresses.push('[도로명 주소] ' + address.roadAddress);
                }

                document.getElementById(textId).innerText = htmlAddresses;
            });
        }

        // function selectAnotherInfowindow(move, key) {
        //     let marker;
        //     let infoWindow;
        //     if (move === 'moveLeft' && key - 1 > -1) {
        //         marker = markers[key - 1]
        //         infoWindow = infoWindows[key - 1];
        //         if (infoWindow.getMap()) {
        //             infoWindow.close();
        //         } else {
        //             infoWindow.open(map, marker);
        //         }
        //         console.log(key + "l");
        //         console.log('left');
        //         return 0;
        //     } else if (move === 'moveRight') {
        //         marker = markers[key + 1]
        //         infoWindow = infoWindows[key + 1];
        //         if (infoWindow.getMap()) {
        //             infoWindow.close();
        //         } else {
        //             infoWindow.open(map, marker);
        //         }
        //         console.log(key);
        //         console.log('right');
        //         return 0;
        //     } else {
        //         console.log('moveInfoWindow Err');
        //     }
        // }

        function goToDeviceUpdate(deviceId) {
            location.href = '/deviceUpdate?deviceId=' + deviceId;
        }

        function deleteDevice(deviceId) {
            const delConfirm = confirm("장치를 정말 삭제 하시겠습니까?");
            if (!delConfirm) {
                return 0;
            }

            $.ajax({
                data: {
                    'deviceId': deviceId
                },
                type: 'get',
                dataType: 'html',
                url: "/deviceManage/api/delete",
                contentType: 'application/json',
                success: (result) => {
                    console.log(result);
                    alert("등록된 장치를 삭제 했습니다.");
                    location.reload();                                                                  //-- TODO: search the another way instead of reload()! --//
                },
                error: (err) => {
                    console.log(err)
                }
            })
        }

        function openCloseTable() {
            if (document.getElementById('toggleOperation').style.display === 'block') {
                document.getElementById('toggleOperation').style.display = 'none';
                document.getElementById('tableShowToggle').textContent = '[상세정보]';
            } else {
                document.getElementById('toggleOperation').style.display = 'block';
                document.getElementById('tableShowToggle').textContent = '[숨기기]';
            }
        }

        function findDeviceLoaction(latitude, longitude) {
            const point = new naver.maps.LatLng(latitude, longitude);

            map.setCenter(point);
            map.setZoom(17);
            window.scrollTo(0, 0);
        }

    //#diviceContainer
    title 장치 관리
    .row#deviceContatiner
        p#pageTitle 장치 목록

    #map
    .row#registerRow
        button(onClick='location.href = "/deviceRegister"' class='btn btn-dark mr-2' style="text-align: right") 등록
        span#tableShowToggle(onclick='openCloseTable()') [상세정보]

    .row#toggleOperation
        table#deviceManageTable(class="table table-bordered table-hover")
            thead#deviceManageTableHead
                tr
                    th(style="width: 15%") 장치 명
                    th(style="width: 15%") 장치 타입
                    th(style="width: 40%") 설치 장소
                    th(style="width: 15%") 등록 일
                    th(style="width: 15%") 수정 일
            tbody#deviceManageTableTbody
                 each deviceData in dataOfTable
                     tr
                         td #{deviceData.deviceName}
                         td #{deviceData.deviceType}
                         td(class="deviceAddress" id=deviceData.deviceId onclick="findDeviceLoaction(" + `${deviceData.deviceLatitude}` + "," + `${deviceData.deviceLongitude}` + ")")
                             script.
                                 searchCoordinateToAddress(#{deviceData.deviceLatitude}, #{deviceData.deviceLongitude}, #{deviceData.deviceId})
                         td #{deviceData.registerDate}
                         td #{deviceData.modifyDate}

